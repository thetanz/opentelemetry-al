{
    "Install Codeunit": {
        "scope": "al",
        "prefix": "tinstallcodeunit (THETA)",
        "body": [
            "codeunit ${1:50098} Install${2:Ext}",
            "{",
            "    Subtype = Install;",
            "",
            "    trigger OnInstallAppPerCompany()",
            "    var",
            "        AppInfo: ModuleInfo;",
            "    begin",
            "        NavApp.GetCurrentModuleInfo(AppInfo);",
            "        if AppInfo.DataVersion() = Version.Create(0, 0, 0, 0) then",
            "            HandleFreshInstallPerCompany()",
            "        else",
            "            HandleReinstallPerCompany();",
            "    end;",
            "",
            "    trigger OnInstallAppPerDatabase()",
            "    var",
            "        AppInfo: ModuleInfo;",
            "    begin",
            "        NavApp.GetCurrentModuleInfo(AppInfo);",
            "        if AppInfo.DataVersion() = Version.Create(0, 0, 0, 0) then",
            "            HandleFreshInstallPerDatabase()",
            "        else",
            "            HandleReinstallPerDatabase();",
            "    end;",
            "",
            "    local procedure HandleFreshInstallPerCompany();",
            "    begin",
            "        // Do work needed the first time this extension is ever installed for this company.",
            "        // Some possible usages:",
            "        // - Initial data setup for use",
            "    end;",
            "",
            "    local procedure HandleReinstallPerCompany();",
            "    begin",
            "        // Do work needed when reinstalling the same version of this extension back on this company.",
            "        // Some possible usages:",
            "        // - Data 'patchup' work, for example, detecting if new 'base' records have been changed while you have been working 'offline'.",
            "        // - Setup 'welcome back' messaging for next user access.",
            "    end;",
            "",
            "    local procedure HandleFreshInstallPerDatabase();",
            "    begin",
            "        // Do work needed the first time this extension is ever installed for this tenant.",
            "        // Some possible usages:",
            "        // - Service callback/telemetry indicating that extension was install",
            "    end;",
            "",
            "    local procedure HandleReinstallPerDatabase();",
            "    begin",
            "        // Do work needed when reinstalling the same version of this extension back on this tenant.",
            "        // Some possible usages:",
            "        // - Service callback/telemetry indicating that extension was reinstalled",
            "    end;",
            "}"
        ],
        "description": "Install Codeunit (THETA)"
    },
    "Upgrade Codeunit": {
        "scope": "al",
        "prefix": "tupgradecodeunit (THETA)",
        "body": [
            "codeunit ${1:50099} Upgrade${2:Ext}",
            "{",
            "    Subtype = Upgrade;",
            "",
            "    var",
            "        AppInfo: ModuleInfo;",
            "        AppInfoDefined: Boolean;",
            "",
            "    trigger OnCheckPreconditionsPerCompany()",
            "    begin",
            "        // Code to check that certain company requirements are met in order to run the upgrade",
            "        case true of",
            "            // EXAMPLE:",
            "            // IsValidForVersion(Version.Create(0, 0, 0, 1)):",
            "            //     begin",
            "            //          List of procedures which is required to be executed for this version upgrade",
            "            //     end;",
            "        end;",
            "    end;",
            " ",
            "    trigger OnCheckPreconditionsPerDatabase()",
            "    begin",
            "        // Code to check that certain tenant requirements are met in order to run the upgrade",
            "        case true of",
            "            // EXAMPLE:",
            "            // IsValidForVersion(Version.Create(0, 0, 0, 1)):",
            "            //     begin",
            "            //          List of procedures which is required to be executed for this version upgrade",
            "            //     end;",
            "        end;",
            "    end;",
            " ",
            "    trigger OnUpgradePerCompany()",
            "    begin",
            "        // Code to perform company related table upgrade tasks",
            "        case true of",
            "            // EXAMPLE:",
            "            // IsValidForVersion(Version.Create(0, 0, 0, 1)):",
            "            //     begin",
            "            //         Example_PopulateNewField();",
            "            //         List of procedures which is required to be executed for this version upgrade",
            "            //     end;",
            "        end;",
            "    end;",
            " ",
            "    trigger OnUpgradePerDatabase()",
            "    begin",
            "        // Code to perform tenant related upgrade tasks",
            "        case true of",
            "            // EXAMPLE:",
            "            // IsValidForVersion(Version.Create(0, 0, 0, 1)):",
            "            //     begin",
            "            //          List of procedures which is required to be executed for this version upgrade",
            "            //     end;",
            "        end;",
            "    end;",
            " ",
            "    local procedure IsValidForVersion(Version: Version): Boolean",
            "    begin",
            "        if not AppInfoDefined then begin",
            "            NavApp.GetCurrentModuleInfo(AppInfo);",
            "            AppInfoDefined := true;",
            "        end;",
            "        exit((Version > AppInfo.DataVersion()) and (Version >= AppInfo.AppVersion()));",
            "    end;",
            "}"
        ],
        "description": "Upgrade Codeunit (THETA)"
    },
    "Test Codeunit": {
        "scope": "al",
        "prefix": "ttestcodeunit (THETA)",
        "body": [
            "codeunit ${1:50140} ${2}",
            "{",
            "    // [FEATURE] [${3}]",
            "",
            "    Subtype = Test;",
            "    TestPermissions = Disabled;",
            "",
            "    var",
            "        Assert: Codeunit Assert;",
            "        LibraryLowerPermissions: Codeunit \"Library - Lower Permissions\";",
            "        LibraryRandom: Codeunit \"Library - Random\";",
            "        LibraryUtility: Codeunit \"Library - Utility\";",
            "",
            "    ${0}",
            "}"
        ],
        "description": "Test Codeunit (THETA)"
    },
    "Test Function": {
        "scope": "al",
        "prefix": "ttestfunc (THETA)",
        "body": [
            "[Test]",
            "procedure ${1}();",
            "begin",
            "    // [Scenario] ${2}",
            "    // [Given] ${3}",
            "     ${0}",
            "    // [When] ${4}",
            "",
            "    // [Then] ${5}",
            "end;"
        ],
        "description": "Test Function (THETA)"
    }
}